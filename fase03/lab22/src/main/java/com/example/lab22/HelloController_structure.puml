@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": false,
    "cutInterfaceStructures": false,
    "cutDataStructures": false,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 6,
    "backwardDepth": 6,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": true, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "ForwardOnly" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "com.example.lab22.HelloController",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1322970774 { 
   	label=example
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_122109705 { 
   	label=lab22
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   Archer545405604[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Archer</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   arrows: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   random: Random [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ action()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Army545405604[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Army</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   id: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   kingdom: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nArchers: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nKnights: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nSpears: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nSwords: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   random: Random [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   realms: String[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   soldiers: List&lt;Soldier&gt; [0..*]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >+ perk()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Board545405604[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Board</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   perks: Map&lt;String, String&gt; [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >#   random: Random [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   table: Soldier[][] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   territories: String[] [0..*]</TD></TR>
<TR><TD ALIGN="LEFT" >-   territory: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ initializeArmy(a: Army)</TD></TR>
<TR><TD ALIGN="LEFT" >+ initializeTable()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

HelloController545405604[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)HelloController</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   a1: Army [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   a2: Army [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   buttonClickLatch: CountDownLatch [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gameOver: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   gridPane: GridPane [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   map: Board [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nEj1: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   nEj2: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   rootVBox: VBox [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >- battle(s1: Soldier, s2: Soldier)</TD></TR>
<TR><TD ALIGN="LEFT" >+ changeTurn(event: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ gameOver()</TD></TR>
<TR><TD ALIGN="LEFT" >- handleCloseButton(event: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >- handleExpandButton(event: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >- handleMinimizeButton(event: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >+ initialize()</TD></TR>
<TR><TD ALIGN="LEFT" >- initializeBoard()</TD></TR>
<TR><TD ALIGN="LEFT" >+ move(s1: Soldier, s2: Soldier)</TD></TR>
<TR><TD ALIGN="LEFT" >+ onButtonClick(event: MouseEvent)</TD></TR>
<TR><TD ALIGN="LEFT" >- placeSoldiers()</TD></TR>
<TR><TD ALIGN="LEFT" >+ runGame()</TD></TR>
<TR><TD ALIGN="LEFT" >- showAlert(contentText: String, title: String)</TD></TR>
<TR><TD ALIGN="LEFT" >- showInputAlert(s: Soldier): String</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Knight545405604[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Knight</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >-   isMounted: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   random: Random [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   weapon: String [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ action()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Soldier545405604[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Soldier</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   HP: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   alias: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   armyId: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   attack: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   color: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   defense: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   name: String [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   status: boolean [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   x: int [1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   y: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ action()</TD></TR>
<TR><TD ALIGN="LEFT" >+ copy(source: Soldier)</TD></TR>
<TR><TD ALIGN="LEFT" >+ destroy()</TD></TR>
<TR><TD ALIGN="LEFT" >+ winner(s1: Soldier, s2: Soldier): Soldier</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Spearman545405604[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Spearman</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   random: Random [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   spearLong: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ action()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

Swordsman545405604[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)Swordsman</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   random: Random [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >-   swordLong: int [1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ action()</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
Army545405604 -> Soldier545405604[label="soldiers
[0..*]"];
Board545405604 -> Soldier545405604[label="table
[0..*]"];
HelloController545405604 -> Army545405604[label="a1
[0..1]"];
HelloController545405604 -> Army545405604[label="a2
[0..1]"];
HelloController545405604 -> Board545405604[label="map
[0..1]"];
Soldier545405604 -> Archer545405604[arrowhead=none, arrowtail=empty, dir=both];
Soldier545405604 -> Knight545405604[arrowhead=none, arrowtail=empty, dir=both];
Soldier545405604 -> Spearman545405604[arrowhead=none, arrowtail=empty, dir=both];
Soldier545405604 -> Swordsman545405604[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml